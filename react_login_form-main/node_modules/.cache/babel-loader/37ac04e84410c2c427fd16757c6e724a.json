{"ast":null,"code":"// import { useRef, useState, useEffect } from \"react\";\n// import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import ModalRegister from \"./ModalRegister\";\n// import styled from 'styled-components';\n// import axios from '../../../api/axios';\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// const REGISTER_URL = '/register';\n// const Register = () => {\n//     const userRef = useRef();\n//     const errRef = useRef();\n//     const [stateModal, changeStateModal] = useState(false);\n//     const [user, setUser] = useState('');\n//     const [validName, setValidName] = useState(false);\n//     const [userFocus, setUserFocus] = useState(false);\n//     const [name, setName] = useState('');\n//     const [phone,setPhone] = useState(''); \n//     const [email,setEmail] = useState('');\n//     const [pwd, setPwd] = useState('');\n//     const [validPwd, setValidPwd] = useState(false);\n//     const [pwdFocus, setPwdFocus] = useState(false);\n//     const [matchPwd, setMatchPwd] = useState('');\n//     const [validMatch, setValidMatch] = useState(false);\n//     const [matchFocus, setMatchFocus] = useState(false);\n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n//     useEffect(() => {\n//         setValidName(USER_REGEX.test(user));\n//     }, [user])\n//     useEffect(() => {\n//         setValidPwd(PWD_REGEX.test(pwd));\n//         setValidMatch(pwd === matchPwd);\n//     }, [pwd, matchPwd])\n//     useEffect(() => {\n//         setErrMsg('');\n//     }, [user, pwd, matchPwd])\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         const v1 = USER_REGEX.test(user);\n//         const v2 = PWD_REGEX.test(pwd);\n//         if (!v1 || !v2) {\n//             setErrMsg(\"Invalid Entry\");\n//             return;\n//         }\n//         try {\n//             const response = await axios.post(REGISTER_URL,\n//                 JSON.stringify({ user,name,phone,email,pwd }),\n//                 {\n//                     headers: { 'Content-Type': 'application/json' },\n//                     withCredentials: true\n//                 }\n//             );\n//             console.log(JSON.stringify(response?.data));\n//             setSuccess(true);\n//             setUser('');\n//             setName('');\n//             setPhone('');\n//             setEmail('');\n//             setPwd('');\n//             setMatchPwd('');\n//         } catch (err) {\n//             if (!err?.response) {\n//                 setErrMsg('No Server Response');\n//             } else if (err.response?.status === 409) {\n//                 setErrMsg('Username Taken');\n//             } else {\n//                 setErrMsg('Registration Failed')\n//             }\n//             errRef.current.focus();\n//         }\n//     }\n//     return (\n//         <div>\n//             <Content_Anchor>\n//                 <Anchor onClick={() => changeStateModal(!stateModal)}>Crear Cuenta</Anchor>\n//             </Content_Anchor>\n//             <ModalRegister state={stateModal} changestate={changeStateModal}>\n//                 <Content>\n//                     <>\n//                         {success ? (\n//                             <section>\n//                             <h1>Exito!</h1>\n//                             <p>\n//                                 <a href=\"/login\">Sign In</a>\n//                             </p>\n//                         </section>\n//                     ) : (\n//                         <section>\n//                             <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n//                             <h1>Registro</h1>\n//                             <form onSubmit={handleSubmit}>\n//                                 <label htmlFor=\"username\">\n//                                     Usuario:\n//                                     <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\n//                                     <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"username\"\n//                                     ref={userRef}\n//                                     autoComplete=\"off\"\n//                                     onChange={(e) => setUser(e.target.value)}\n//                                     value={user}\n//                                     required\n//                                     aria-invalid={validName ? \"false\" : \"true\"}\n//                                     aria-describedby=\"uidnote\"\n//                                     onFocus={() => setUserFocus(true)}\n//                                     onBlur={() => setUserFocus(false)}\n//                                 />\n//                                 <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n//                                     <FontAwesomeIcon icon={faInfoCircle} />\n//                                     4 a 24 caracteres.<br />\n//                                     Debe comenzar con una letra.<br />\n//                                     Se permiten letras, números, guiones bajos y guiones.\n//                                 </p>\n//                                 <label htmlFor=\"name\">\n//                                 Nombre:\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"name\"\n//                                     ref={userRef}\n//                                     autoComplete=\"off\"\n//                                     onChange={(e) => setName(e.target.value)}\n//                                     value={name}\n//                                 />\n//                             <label htmlFor=\"phone\">\n//                                     Telefono:\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"phone\"\n//                                     onChange={(e) => setPhone(e.target.value)}\n//                                     value={phone}\n//                                 />\n//                                 <label htmlFor=\"emil\">\n//                                 Email:\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"email\"\n//                                     ref={userRef}\n//                                     autoComplete=\"off\"\n//                                     onChange={(e) => setEmail(e.target.value)}\n//                                     value={email}\n//                                 />\n//                                 <label htmlFor=\"password\">\n//                                     Contraseña:\n//                                     <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\n//                                     <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\n//                                 </label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"password\"\n//                                     onChange={(e) => setPwd(e.target.value)}\n//                                     value={pwd}\n//                                     required\n//                                     aria-invalid={validPwd ? \"false\" : \"true\"}\n//                                     aria-describedby=\"pwdnote\"\n//                                     onFocus={() => setPwdFocus(true)}\n//                                     onBlur={() => setPwdFocus(false)}\n//                                 />\n//                                 <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\n//                                     <FontAwesomeIcon icon={faInfoCircle} />\n//                                     8 a 24 caracteres.<br />\n//                                     Debe incluir letras mayúsculas y minúsculas, un número y un carácter especial.<br />\n//                                     Caracteres especiales permitidos: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\n//                                 </p>\n//                                 <label htmlFor=\"confirm_pwd\">\n//                                     Confirmar Contraseña:\n//                                     <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\n//                                     <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\n//                                 </label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"confirm_pwd\"\n//                                     onChange={(e) => setMatchPwd(e.target.value)}\n//                                     value={matchPwd}\n//                                     required\n//                                     aria-invalid={validMatch ? \"false\" : \"true\"}\n//                                     aria-describedby=\"confirmnote\"\n//                                     onFocus={() => setMatchFocus(true)}\n//                                     onBlur={() => setMatchFocus(false)}\n//                                 />\n//                                 <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\n//                                     <FontAwesomeIcon icon={faInfoCircle} />\n//                                     Debe coincidir con el primer campo de entrada de contraseña.\n//                                 </p>\n//                                 <button disabled={!validName || !validPwd || !validMatch ? true : false}>Sign Up</button>\n//                             </form>\n//                             <p>\n//                                 ¿Ya registrado?<br />\n//                                 <span className=\"line\">\n//                                     {/*put router link here*/}\n//                                     <a href=\"/login\">Sign In</a>\n//                                 </span>\n//                             </p>\n//                         </section>\n//                     )}\n//                     </>\n//                 </Content>\n//             </ModalRegister>\n//         </div>\n//     )\n// }\n// export default Register\n// const Content_Anchor = styled.div`\n//     // font-family: 'Bruno Ace SC', cursive;\n//     // padding: 3px;\n// `;\n// const Anchor = styled.div`\n//     // color: black;\n//     // cursor: pointer;\n//     // padding: 3px;\n// `;\n// const Content = styled.div`\n// \t// display: flex;\n// \t// flex-direction: column;\n// \t// align-items: center;\n//     // font-family: 'Bruno Ace SC', cursive;\n// `;","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/Login_Register_Proyect-main/react_login_form-main/src/components/layouts/Form2/Register.js"],"names":[],"mappingssourcesContent":["// import { useRef, useState, useEffect } from \"react\";\n// import { faCheck, faTimes, faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import ModalRegister from \"./ModalRegister\";\n// import styled from 'styled-components';\n// import axios from '../../../api/axios';\n\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// const REGISTER_URL = '/register';\n\n// const Register = () => {\n//     const userRef = useRef();\n//     const errRef = useRef();\n\n//     const [stateModal, changeStateModal] = useState(false);\n\n//     const [user, setUser] = useState('');\n//     const [validName, setValidName] = useState(false);\n//     const [userFocus, setUserFocus] = useState(false);\n\n//     const [name, setName] = useState('');\n\n//     const [phone,setPhone] = useState(''); \n\n//     const [email,setEmail] = useState('');\n \n//     const [pwd, setPwd] = useState('');\n//     const [validPwd, setValidPwd] = useState(false);\n//     const [pwdFocus, setPwdFocus] = useState(false);\n\n//     const [matchPwd, setMatchPwd] = useState('');\n//     const [validMatch, setValidMatch] = useState(false);\n//     const [matchFocus, setMatchFocus] = useState(false);\n\n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n\n\n//     useEffect(() => {\n//         setValidName(USER_REGEX.test(user));\n//     }, [user])\n\n//     useEffect(() => {\n//         setValidPwd(PWD_REGEX.test(pwd));\n//         setValidMatch(pwd === matchPwd);\n//     }, [pwd, matchPwd])\n\n//     useEffect(() => {\n//         setErrMsg('');\n//     }, [user, pwd, matchPwd])\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         const v1 = USER_REGEX.test(user);\n//         const v2 = PWD_REGEX.test(pwd);\n\n//         if (!v1 || !v2) {\n//             setErrMsg(\"Invalid Entry\");\n//             return;\n//         }\n//         try {\n//             const response = await axios.post(REGISTER_URL,\n//                 JSON.stringify({ user,name,phone,email,pwd }),\n//                 {\n//                     headers: { 'Content-Type': 'application/json' },\n//                     withCredentials: true\n//                 }\n//             );\n//             console.log(JSON.stringify(response?.data));\n//             setSuccess(true);\n//             setUser('');\n//             setName('');\n//             setPhone('');\n//             setEmail('');\n//             setPwd('');\n//             setMatchPwd('');\n            \n//         } catch (err) {\n//             if (!err?.response) {\n//                 setErrMsg('No Server Response');\n//             } else if (err.response?.status === 409) {\n//                 setErrMsg('Username Taken');\n//             } else {\n//                 setErrMsg('Registration Failed')\n//             }\n//             errRef.current.focus();\n//         }\n//     }\n\n//     return (\n//         <div>\n//             <Content_Anchor>\n//                 <Anchor onClick={() => changeStateModal(!stateModal)}>Crear Cuenta</Anchor>\n//             </Content_Anchor>\n\n//             <ModalRegister state={stateModal} changestate={changeStateModal}>\n//                 <Content>\n//                     <>\n//                         {success ? (\n//                             <section>\n//                             <h1>Exito!</h1>\n//                             <p>\n//                                 <a href=\"/login\">Sign In</a>\n//                             </p>\n//                         </section>\n//                     ) : (\n//                         <section>\n//                             <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n//                             <h1>Registro</h1>\n//                             <form onSubmit={handleSubmit}>\n//                                 <label htmlFor=\"username\">\n//                                     Usuario:\n//                                     <FontAwesomeIcon icon={faCheck} className={validName ? \"valid\" : \"hide\"} />\n//                                     <FontAwesomeIcon icon={faTimes} className={validName || !user ? \"hide\" : \"invalid\"} />\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"username\"\n//                                     ref={userRef}\n//                                     autoComplete=\"off\"\n//                                     onChange={(e) => setUser(e.target.value)}\n//                                     value={user}\n//                                     required\n//                                     aria-invalid={validName ? \"false\" : \"true\"}\n//                                     aria-describedby=\"uidnote\"\n//                                     onFocus={() => setUserFocus(true)}\n//                                     onBlur={() => setUserFocus(false)}\n//                                 />\n//                                 <p id=\"uidnote\" className={userFocus && user && !validName ? \"instructions\" : \"offscreen\"}>\n//                                     <FontAwesomeIcon icon={faInfoCircle} />\n//                                     4 a 24 caracteres.<br />\n//                                     Debe comenzar con una letra.<br />\n//                                     Se permiten letras, números, guiones bajos y guiones.\n//                                 </p>\n\n//                                 <label htmlFor=\"name\">\n//                                 Nombre:\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"name\"\n//                                     ref={userRef}\n//                                     autoComplete=\"off\"\n//                                     onChange={(e) => setName(e.target.value)}\n//                                     value={name}\n//                                 />\n//                             <label htmlFor=\"phone\">\n//                                     Telefono:\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"phone\"\n//                                     onChange={(e) => setPhone(e.target.value)}\n//                                     value={phone}\n//                                 />\n//                                 <label htmlFor=\"emil\">\n//                                 Email:\n//                                 </label>\n//                                 <input\n//                                     type=\"text\"\n//                                     id=\"email\"\n//                                     ref={userRef}\n//                                     autoComplete=\"off\"\n//                                     onChange={(e) => setEmail(e.target.value)}\n//                                     value={email}\n//                                 />\n//                                 <label htmlFor=\"password\">\n//                                     Contraseña:\n//                                     <FontAwesomeIcon icon={faCheck} className={validPwd ? \"valid\" : \"hide\"} />\n//                                     <FontAwesomeIcon icon={faTimes} className={validPwd || !pwd ? \"hide\" : \"invalid\"} />\n//                                 </label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"password\"\n//                                     onChange={(e) => setPwd(e.target.value)}\n//                                     value={pwd}\n//                                     required\n//                                     aria-invalid={validPwd ? \"false\" : \"true\"}\n//                                     aria-describedby=\"pwdnote\"\n//                                     onFocus={() => setPwdFocus(true)}\n//                                     onBlur={() => setPwdFocus(false)}\n//                                 />\n//                                 <p id=\"pwdnote\" className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}>\n//                                     <FontAwesomeIcon icon={faInfoCircle} />\n//                                     8 a 24 caracteres.<br />\n//                                     Debe incluir letras mayúsculas y minúsculas, un número y un carácter especial.<br />\n//                                     Caracteres especiales permitidos: <span aria-label=\"exclamation mark\">!</span> <span aria-label=\"at symbol\">@</span> <span aria-label=\"hashtag\">#</span> <span aria-label=\"dollar sign\">$</span> <span aria-label=\"percent\">%</span>\n//                                 </p>\n//                                 <label htmlFor=\"confirm_pwd\">\n//                                     Confirmar Contraseña:\n//                                     <FontAwesomeIcon icon={faCheck} className={validMatch && matchPwd ? \"valid\" : \"hide\"} />\n//                                     <FontAwesomeIcon icon={faTimes} className={validMatch || !matchPwd ? \"hide\" : \"invalid\"} />\n//                                 </label>\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"confirm_pwd\"\n//                                     onChange={(e) => setMatchPwd(e.target.value)}\n//                                     value={matchPwd}\n//                                     required\n//                                     aria-invalid={validMatch ? \"false\" : \"true\"}\n//                                     aria-describedby=\"confirmnote\"\n//                                     onFocus={() => setMatchFocus(true)}\n//                                     onBlur={() => setMatchFocus(false)}\n//                                 />\n//                                 <p id=\"confirmnote\" className={matchFocus && !validMatch ? \"instructions\" : \"offscreen\"}>\n//                                     <FontAwesomeIcon icon={faInfoCircle} />\n//                                     Debe coincidir con el primer campo de entrada de contraseña.\n//                                 </p>\n\n//                                 <button disabled={!validName || !validPwd || !validMatch ? true : false}>Sign Up</button>\n//                             </form>\n//                             <p>\n//                                 ¿Ya registrado?<br />\n//                                 <span className=\"line\">\n//                                     {/*put router link here*/}\n//                                     <a href=\"/login\">Sign In</a>\n//                                 </span>\n//                             </p>\n//                         </section>\n//                     )}\n//                     </>\n//                 </Content>\n//             </ModalRegister>\n//         </div>\n//     )\n// }\n\n// export default Register\n\n// const Content_Anchor = styled.div`\n//     // font-family: 'Bruno Ace SC', cursive;\n//     // padding: 3px;\n// `;\n\n// const Anchor = styled.div`\n//     // color: black;\n//     // cursor: pointer;\n//     // padding: 3px;\n// `;\n\n// const Content = styled.div`\n// \t// display: flex;\n// \t// flex-direction: column;\n// \t// align-items: center;\n//     // font-family: 'Bruno Ace SC', cursive;\n// `;"]},"metadata":{},"sourceType":"module"}